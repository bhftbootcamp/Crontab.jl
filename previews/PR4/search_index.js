var documenterSearchIndex = {"docs":
[{"location":"#Crontab.jl","page":"Home","title":"Crontab.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"⏰ Crontab - Lightweight cron parsing & scheduling for Julia. Crontab.jl provides a small, fast cron expression parser and runtime helpers to compute next/previous execution times, generate upcoming timestamps, and block until the next trigger.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you haven't installed our local registry yet, do that first:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] registry add https://github.com/bhftbootcamp/Green.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, to install Crontab, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add Crontab","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute next match (inclusive of the minute boundary)","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\nnext_time = next(c, DateTime(\"2025-01-01T12:03:00\")) # 2025-01-01T12:05:00","category":"page"},{"location":"","page":"Home","title":"Home","text":"Previous match (inclusive of the minute boundary)","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\nprev_time = prev(c, DateTime(\"2025-01-01T12:03:00\")) # 2025-01-01T12:00:00","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compute next match offset-style (not chrono-style)","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\nnext_offset_time = next_offset(c, DateTime(\"2025-01-01T12:03:00\")) # 2025-01-01T12:08:00","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate 4 upcoming triggers strictly after a start time","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\nts = timesteps(c, DateTime(\"2025-01-01T12:03:00\"), 4) # 12:05, 12:10, 12:15, 12:20","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create infinite offset-based iterator from starting point","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\nstart = DateTime(\"2025-01-01T12:07:00\")\nxs = collect(take(gen_times(c, start), 4))\n# [\n#         DateTime(\"2025-01-01T12:12:00\"),\n#         DateTime(\"2025-01-01T12:17:00\"),\n#         DateTime(\"2025-01-01T12:22:00\"),\n#         DateTime(\"2025-01-01T12:27:00\"),\n# ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Block until the next trigger (uses system clock)","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = Cron(\"*/5 * * * *\")\n@async begin\n    println(\"Waiting…\", now(UTC))\n    wait(c; tz=UTC)\n    println(\"Triggered at\", now(UTC))\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Get next leap year from date","category":"page"},{"location":"","page":"Home","title":"Home","text":"c_leap = Cron(\"0 0 29 2 *\")\nnext(c_leap, DateTime(\"2024-03-01T00:00:00\")) # DateTime(\"2028-02-29T00:00:00\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Business hours on weekdays (every 10 minutes)","category":"page"},{"location":"","page":"Home","title":"Home","text":"cron = Cron(; minute=\"*/10\", hour=\"9-17\", weekday=\"1-5\")  # 09:00–17:59, Mon–Fri\n\nwhile true\n    wait(cron)\n    @async begin\n        # do useful work\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Twice a month: 1st and 15th at 06:30 (Apr/Oct)","category":"page"},{"location":"","page":"Home","title":"Home","text":"cron = Cron(\"30 6 1,15 4,10 *\")  # Apr/Oct 1st and 15th at 06:30","category":"page"},{"location":"","page":"Home","title":"Home","text":"Get the next time from an arbitrary point","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Crontab, Dates\n\nc = Cron(\"*/5 * * * *\")\n\nnext(c, DateTime(\"2025-01-01T12:03:00\"))  # => 2025-01-01T12:05:00","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example of running tasks asynchronously on cron schedules","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Dates\nusing Crontab\nusing CryptoExchangeAPIs.Binance\n\nfunction spawn_job(name::AbstractString, cron::Cron, times::Int, job::Function; run_now::Bool=true)\n    return @async begin\n        if run_now\n            job()\n        end\n        for _ in 1:times\n            wait(cron; tz=UTC)\n            job()\n        end\n        println(\"$name done\")\n        flush(stdout)\n    end\nend\n\nfunction heartbeat_job()\n    println(\"heartbeat at $(now(UTC))\")\n    flush(stdout)\nend\n\nfunction report_job()\n    res = Binance.Spot.Ticker.ticker(; symbol = \"ADAUSDT\")\n    println(\"ADA/USDT price: \", res.result.lastPrice, \" at $(now(UTC))\")\n    flush(stdout)\nend\n\n# Start two concurrent cron-driven tasks\nt1 = spawn_job(\"heartbeat\", Cron(\"*/1 * * * *\"), 3, heartbeat_job)\nt2 = spawn_job(\"report\",    Cron(\"*/2 * * * *\"), 2, report_job)\n\n# Wait for both to finish\nfetch(t1)\nfetch(t2)","category":"page"},{"location":"pages/api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"Lightweight cron parsing & scheduling for Julia. Crontab.jl provides a small, fast cron expression parser and runtime helpers to compute next/previous execution times, generate upcoming timestamps, and block until the next trigger.","category":"page"},{"location":"pages/api_reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"pages/api_reference/#Crontab.Cron","page":"API Reference","title":"Crontab.Cron","text":"Cron\n\nInternal representation of a cron schedule. Construct a cron schedule from a five-field expression: minute hour day month weekday. Supports *, /, -, ,, and . where . denotes an empty set.\n\nExamples\n\njulia> Cron(\"*/15 * * * *\")\n\"At every 15th minute\"\n\njulia> Cron(\"*\", \"*\", \"*\", \"*\", \"1\")\n\"At every minute\non Monday\"\n\njulia> Cron(minute=\"0\", hour=\"0\", day=\"1\")\n\"At minute 0\npast hour 0\non day-of-month 1\"\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"pages/api_reference/#Crontab.next","page":"API Reference","title":"Crontab.next","text":"next(c::Cron, dt::DateTime) -> DateTime\n\nReturn the next DateTime on a minute boundary that satisfies the cron schedule c, starting from dt (inclusive).\n\nnote: Note\nThe day-of-month and day-of-week fields are combined with OR semantics, unless one of them is *, in which case only the other is considered.\n\nExamples\n\njulia> using Dates\n\njulia> next(Cron(\"*/5 * * * *\"), DateTime(\"2025-01-01T12:03:00\"))\n2025-01-01T12:05:00\n\njulia> next(Cron(\"0 14 * * *\"), Date(2025,01,01))\n2025-01-01T14:00:00\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Crontab.prev","page":"API Reference","title":"Crontab.prev","text":"prev(c::Cron, dt::DateTime) -> DateTime\n\nReturn the greatest DateTime on a minute boundary that satisfies the cron schedule c, before dt (inclusive).\n\nExamples\n\njulia> using Dates\n\njulia> prev(Cron(\"*/5 * * * *\"), DateTime(\"2025-01-01T12:03:00\"))\n2025-01-01T12:00:00\n\njulia> prev(Cron(\"0 * 23 * *\"), Date(2025,01,01))\n2024-12-23T23:00:00\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Crontab.timesteps","page":"API Reference","title":"Crontab.timesteps","text":"timesteps(c::Cron, start::DateTime, n::Integer) -> Vector{DateTime}\n\nReturn n upcoming chrono-based times for cron schedule c, strictly after start.\n\nExamples\n\njulia> using Dates\n\njulia> timesteps(Cron(\"*/15 * * * *\"), DateTime(\"2025-01-01T12:03:00\"), 4)\n4-element Vector{DateTime}:\n 2025-01-01T12:15:00\n 2025-01-01T12:30:00\n 2025-01-01T12:45:00\n 2025-01-01T13:00:00\n\njulia> timesteps(Cron(\"*/5 * * * *\"), Date(2025,01,01), 2)\n2-element Vector{DateTime}:\n 2025-01-01T00:05:00\n 2025-01-01T00:10:00\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Crontab.pretty","page":"API Reference","title":"Crontab.pretty","text":"pretty(c::Cron) -> String\n\nReturns a human-readable representation of a Cron schedule. Used internally when printing a Cron.\n\nExamples\n\njulia> pretty(Cron(\"*/15 * * * *\"))\n\"At every 15th minute\"\n\njulia> pretty(Cron(\"0 14 * * 1-5\"))\n\"At minute 0\\npast hour 14\\non every day-of-week from Monday through Friday\"\n\n\n\n\n\n","category":"function"}]
}
